// Auto-generated TypeScript API client
// Generated by servant-typescript
// Do not edit this file manually

import ky from 'ky';

// Base API configuration - compatible with existing API client
const httpClient = ky.create({
  prefixUrl: "/api/v1",
  timeout: 30000,
  headers: {
    "Content-Type": "application/json",
  },
  hooks: {
    beforeError: [
      (error) => {
        const { response } = error;
        if (response?.body) {
          error.name = "HTTPError";
          error.message = `${response.status} ${response.statusText}`;
        }
        return error;
      },
    ],
  },
});

// Types for API requests and responses
export interface Subject {
  id: number;
  name: string;
  name_cn: string;
  summary: string;
  date: string;
  platform: string;
  images: {
    large: string;
    common: string;
    medium: string;
    small: string;
    grid: string;
  };
  eps: number;
  eps_count: number;
  rating: {
    rank: number;
    total: number;
    count: {
      1: number;
      2: number;
      3: number;
      4: number;
      5: number;
      6: number;
      7: number;
      8: number;
      9: number;
      10: number;
    };
    score: number;
  };
  collection: {
    wish: number;
    collect: number;
    doing: number;
    on_hold: number;
    dropped: number;
  };
  tags: Array<{
    name: string;
    count: number;
  }>;
}

export interface MikanRssItem {
  title: string;
  link: string;
  description: string;
  torrent: string;
  pubDate: string;
  author: string;
  enclosure?: {
    url: string;
    type: string;
    length: number;
  };
}

export interface Bangumi {
  id: string;
  titleZh: string;
  titleJp: string;
  season: number;
  cover: string;
  group: string;
  totalEps: number;
  currentEp: number;
  tags: string[];
  rss: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateBangumiRequest {
  titleZh: string;
  titleJp: string;
  season: number;
  cover: string;
  group: string;
  totalEps: number;
  currentEp: number;
  tags: string[];
  rss: string;
}

export interface UpdateBangumiRequest {
  titleZh?: string;
  titleJp?: string;
  season?: number;
  cover?: string;
  group?: string;
  totalEps?: number;
  currentEp?: number;
  tags?: string[];
  rss?: string;
}

export interface ParseBangumiRequest {
  titleText: string;
}

export interface BgmBangumi {
  title: string;
  season: number;
}

// API Client Functions
export const SearchApi = {
  // Search for bangumi from external sources
  searchBangumi: async (keyword?: string): Promise<Subject[]> => {
    return httpClient
      .get("search/bangumi", keyword ? { searchParams: { keyword } } : {})
      .json<Subject[]>();
  },

  // Search for RSS items from Mikan
  searchRss: async (keyword?: string): Promise<MikanRssItem[]> => {
    return httpClient
      .get("search/rss", keyword ? { searchParams: { keyword } } : {})
      .json<MikanRssItem[]>();
  },
};

export const BangumiApi = {
  // Get all bangumi from local database
  getAll: async (): Promise<{ Entity: Bangumi }[]> => {
    return httpClient.get("bangumi").json<{ Entity: Bangumi }[]>();
  },

  // Create new bangumi in local database
  create: async (data: CreateBangumiRequest): Promise<{ Entity: Bangumi }> => {
    return httpClient.post("bangumi", { json: data }).json<{ Entity: Bangumi }>();
  },

  // Get bangumi by ID
  getById: async (id: string): Promise<{ Entity: Bangumi }> => {
    return httpClient.get(`bangumi/${id}`).json<{ Entity: Bangumi }>();
  },

  // Update bangumi by ID
  update: async (id: string, data: UpdateBangumiRequest): Promise<{ Entity: Bangumi }> => {
    return httpClient.put(`bangumi/${id}`, { json: data }).json<{ Entity: Bangumi }>();
  },

  // Delete bangumi by ID
  delete: async (id: string): Promise<void> => {
    await httpClient.delete(`bangumi/${id}`);
  },

  // Parse bangumi title text
  parse: async (data: ParseBangumiRequest): Promise<BgmBangumi> => {
    return httpClient.post("bangumi/parse", { json: data }).json<BgmBangumi>();
  },
};

// Combined API client
export const ApiClient = {
  search: SearchApi,
  bangumi: BangumiApi,
};

export default ApiClient;